# README file for Machine Project Assignments 2 and 3

## Information about the differences between MP 2 and MP 3

MP 2 is Phase 1 of code generation.
In this phase, you will translate a subset of COOL
that only includes a single class (`Main`) with a single method (`Main.main`) and no attributes.
You will ignore most object-related language features
including case, new, dispatch, static dispatch, isvoid, object, and strings.

MP 3 is Phase 2, and it requires you to finish the translator
to support all the remaining features of COOL.

## Conditional Compilation

In the primary source files, `cgen.cc` and `cgen.h`, you will see some conditional
compilation using the following directives:
```C++
#ifndef MP3 ... #endif
```
or
```C++
#ifdef  MP3 ... #endif
```
These directives enclose code that is only required in Phase 1
or only required in Phase 2, respectively.
In MP 2, you should not have to write any code that is enclosed in `#ifdef MP3  ... #endif`.

The Makefile in `src/` is set up so that you can compile phase 1 by saying 'make cgen-1'
and phase 2 by saying 'make cgen-2'.
The symbol MP3 is defined on the command line in the second case but not the first.

## Common information for both MP 2 and MP 3

- `cgen.h`: the header file for the code generator.
  Feel free to add anything you need.
  It contains partial declarations of the following key classes, which you must complete:

  - `class CGenClassTable`: one per input program.
    This contains the inheritance tree of `CGenNode`s 
    and a symbol table to map class `Symbol`s to `CGenNode` objects.

  - `class CGenNode`: one per class of the input program.
    This represents one "node" in the inheritance tree of classes.
    It contains the information extracted from the AST about the class needed for codegen.

  - `class CGenEnvironment`: one per method;
    this must be passed from expression node to expression node
    during the tree walk over the method body.
    It contains a symbol table to map local (`let`) variable symbols
    to corresponding `operand` objects.

- `cgen.cc`: the skeleton file for the code generator. Code generation proceeds roughly as follows:

   - Our compiler driver (`cool-support/src/cgen_main.cc`) calls `program_class::cgen(std::ostream &os)`
   - `program_class::cgen` creates a new `CgenClassTable`
   - `CgenClassTable` constructor does code generation for the program, including the following steps:
     1. create the class tree from the class list
     1. perform a first setup pass on all the nodes in the tree which includes laying out the features of the class
     1. create global constants
     1. perform a codegen pass on all the nodes in the tree
        - emit code for each method in the class
          - emit code for the expression tree in the method body
            using a recursive tree walk implemented by the `code(CgenEnvironment *)`
            virtual functions defined by every Expression node.

     This is a high level description of what should happen in your
     compiler and the order in which it will occur. Of course, you will 
     need to add some of your own functions and data members to accomplish 
     these tasks - filling in the details is your job.

- `cool-tree.handcode.h`: contains the declarations and definitions of code generation AST nodes.
  You may modify these as you wish, but be sure to do "make clean"
  after doing so. Place all method definitions in `cgen.cc`.

- `coolrt.{h,c}`: Cool runtime implemented in C. Modify to match your generated code (MP 3 only).

From the support code:
- `cgen_main.cc`: the main function of the code generator binary. You should not modify this file.

- `cgen-{1,2}` flags:

  The final compiled and linked code generator is called `cgen`.
  This program will accept several command-line flags.
  For this assignment, -d (debug) may be useful as it sets a global variable `cgen_debug` to `true`.
  If you want your code generator to print debug information when the option is set,
  write your debug code in the following format:

  ```C++
  if (cgen_debug) {
    // ...
  }
  ```